//===-- Design Patterns -----------------------------------------*- C++ -*-===//
///
/// \defgroup gDzn 设计模式
/// \ingroup gRef
///
/// 创建模式
/// + 抽象工厂
/// + 生成器
/// + 工厂方法
/// 结构模式
/// 行为模式
///
/// \version 2018-09-26
/// \since 2018-01-29
/// \authors zhengrr
/// \copyright CC0 1.0
///
//===----------------------------------------------------------------------===//

//===-- Design Patterns Topics ----------------------------------*- C++ -*-===//
///
/// \page pDzn 设计模式议题
/// \tableofcontents
///
/// ____________________
/// \section sCxxAndDclp C++ 和 DCLP 的风险
///
/// 若非必要，建议使用提前初始化单例模式，其无需互斥锁；
/// 若有必要，延迟初始化应直接用锁，而非双重检查锁，且在调用时善用变量缓存，减少访问。
///
/// **为什么反对使用双重检查锁？**
///
/// 简言之，C++ 抽象机是单线程的，天性不支持多线程，双重检查锁无法保证线程安全。
///
/// **为什么直接使用锁可以认为是线程安全的？**
///
/// C++ 线程库会借助于超出 C++ 语言范畴的方式（如嵌入汇编指令），来确保线程安全。
///
/// \sa ["C++ 和 DCLP 的风险"](http://blog.jobbole.com/86392). *伯乐在线*.
///
/// \version 2018-09-17
/// \since 2018-01-23
/// \authors zhengrr
/// \copyright CC0 1.0
///
//===----------------------------------------------------------------------===//
